import type { CharacterDescription, UserData } from "@mml-io/3d-web-user-networking";
import { UserIdentity } from "@mml-io/3d-web-user-networking";
import crypto from "crypto";
import express from "express";

export type AuthUser = {
  // clientId is the connection identifier for the user - it is null before the client websocket is connected
  clientId: number | null;
  // userData is the user's presentation in the world (username and character description)
  userData?: UserData;
  // sessionToken is the token that is generated by this authenticator and the user uses to authenticate their websocket connection
  sessionToken: string;
};

export type BasicUserAuthenticatorOptions = {
  allowAllUserIdentityChanges?: boolean;
  devAllowUnrecognizedSessions: boolean;
};

const defaultOptions: BasicUserAuthenticatorOptions = {
  devAllowUnrecognizedSessions: false,
};

export class BasicUserAuthenticator {
  private usersByClientId = new Map<number, AuthUser>();
  private userBySessionToken = new Map<string, AuthUser>();

  constructor(
    private characterDescription: CharacterDescription,
    private options: BasicUserAuthenticatorOptions = defaultOptions,
  ) {}

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  public async generateAuthorizedSessionToken(req: express.Request): Promise<string> {
    return new Promise((resolve) => {
      const sessionToken = crypto.randomBytes(20).toString("hex");
      const authUser: AuthUser = {
        clientId: null,
        sessionToken,
      };

      this.userBySessionToken.set(sessionToken, authUser);
      resolve(sessionToken);
    });
  }

  public onClientConnect(
    clientId: number,
    sessionToken: string,
    userIdentityPresentedOnConnection?: UserIdentity,
  ): UserData | null {
    console.log(`Client ID: ${clientId} joined with token`);
    let user = this.userBySessionToken.get(sessionToken);
    if (!user && this.options.devAllowUnrecognizedSessions) {
      console.warn(`Dev mode: allowing unrecognized session token`);
      user = {
        clientId: null,
        sessionToken,
      };
      this.userBySessionToken.set(sessionToken, user);
    }

    if (!user) {
      console.error(`Invalid initial user-update for clientId ${clientId}, unknown session`);
      return null;
    }

    if (user.clientId !== null) {
      console.error(`Session token already connected`);
      return null;
    }

    user.clientId = clientId;
    user.userData = {
      username: `User ${clientId}`,
      characterDescription: this.characterDescription,
    };
    if (userIdentityPresentedOnConnection) {
      console.warn("Ignoring user-identity on initial connect");
    }
    this.usersByClientId.set(clientId, user);
    return user.userData;
  }

  public getClientIdForSessionToken(sessionToken: string): { id: number } | null {
    const user = this.userBySessionToken.get(sessionToken);
    if (!user) {
      console.error("getClientIdForSessionToken - unknown session");
      return null;
    }
    if (user.clientId === null) {
      console.error("getClientIdForSessionToken - client not connected");
      return null;
    }
    return { id: user.clientId };
  }

  public onClientUserIdentityUpdate(clientId: number, msg: UserIdentity): UserData | null {
    if (this.options.allowAllUserIdentityChanges) {
      const existing = this.usersByClientId.get(clientId);
      if (!existing) {
        console.error("onClientUserIdentityUpdate - client not connected");
        return null;
      }
      if (!existing.userData) {
        console.error("onClientUserIdentityUpdate - user data not initialized");
        return null;
      }
      return {
        username: msg.username ?? existing.userData.username,
        characterDescription: msg.characterDescription ?? existing.userData.characterDescription,
      };
    } else {
      console.error("onClientUserIdentityUpdate - not allowed");
      // This implementation does not allow updating user data after initial connect.
      // To allow updating user data after initial connect, return the UserData object that reflects the requested change.
      // Returning null will not update the user data.
      return null;
    }
  }

  public onClientDisconnect(clientId: number) {
    console.log(`Remove user-session for ${clientId}`);
    // TODO - expire session token after a period of disconnection
    const userData = this.usersByClientId.get(clientId);
    if (userData) {
      userData.clientId = null;
      this.usersByClientId.delete(clientId);
    }
  }
}
